package db.prob.datalog.query.Absyn; // Java Package generated by the BNF Converter.

import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class Query {
	private String name_;
	private Set<String> head_;
	private List<Literal> body_;

	private Set<String> rels_;
	private Set<String> prels_;
	private Set<String> attr_;

	private void set_attr() {
		Set<String> attr = new HashSet<String>();
		for (Literal b : this.body_) {
			attr.addAll(b.get_attr());
		}
		this.attr_ = attr;
	}

	private void set_allrels() {
		Set<String> prob_rel_set = new HashSet<String>();
		Set<String> rel_set = new HashSet<String>();
		for (Literal rel : this.body_) {
			if (rel instanceof Relation) {
				Relation rel_obj = (Relation) rel;
				if (rel_obj.probabilistic) {
					prob_rel_set.add(rel_obj.name_);
				} else {
					rel_set.add(rel_obj.name_);
				}

			}
		}
		this.rels_ = rel_set;
	}

	public Query(String name, Set<String> head, List<Literal> body) {
		name_ = name;
		head_ = head;
		body_ = body;

		set_attr();
		set_allrels();
	}

	public Set<String> rels() {
		return rels_;
	}

	public Set<String> prels() {
		return prels_;
	}

	public Set<String> attr() {
		return attr_;
	}

	public Set<String> head() {
		return head_;
	}

	public boolean is_separete(String Rel_a, String Rel_b) {
		return !is_connected(Rel_a, Rel_b);
	}

	public boolean is_connected(String Rel_a, String Rel_b) {
		// TODO
		// Rel_a, Rel_b in Rels(q)
		// if there's R.A=R.B and either is not in Head(q)
		return false;
	}

	public boolean is_projection_safe(String query_added_attribute) {
		// TODO
		// let A = attr + query_added_attributes
		// for every R^p in PRels(q)
		// Gamma := A, R^p.E ==> head(q)
		return false;
	}
}